[{"/home/neo/ghost/gscan/app/ghost-version.js":"1","/home/neo/ghost/gscan/app/index.js":"2","/home/neo/ghost/gscan/app/logging.js":"3","/home/neo/ghost/gscan/app/middlewares/log-request.js":"4","/home/neo/ghost/gscan/app/middlewares/upload-validation.js":"5","/home/neo/ghost/gscan/app/public/js/gscan.js":"6","/home/neo/ghost/gscan/bin/cli.js":"7","/home/neo/ghost/gscan/lib/ast-linter/index.js":"8","/home/neo/ghost/gscan/lib/ast-linter/linter.js":"9","/home/neo/ghost/gscan/lib/ast-linter/rules/base.js":"10","/home/neo/ghost/gscan/lib/ast-linter/rules/index.js":"11","/home/neo/ghost/gscan/lib/ast-linter/rules/lint-no-img-url-in-conditionals.js":"12","/home/neo/ghost/gscan/lib/ast-linter/rules/lint-no-multi-param-conditionals.js":"13","/home/neo/ghost/gscan/lib/ast-linter/test.js":"14","/home/neo/ghost/gscan/lib/checker.js":"15","/home/neo/ghost/gscan/lib/checks/001-deprecations.js":"16","/home/neo/ghost/gscan/lib/checks/002-comment-id.js":"17","/home/neo/ghost/gscan/lib/checks/005-template-compile.js":"18","/home/neo/ghost/gscan/lib/checks/010-package-json.js":"19","/home/neo/ghost/gscan/lib/checks/020-theme-structure.js":"20","/home/neo/ghost/gscan/lib/checks/030-assets.js":"21","/home/neo/ghost/gscan/lib/checks/040-ghost-head-foot.js":"22","/home/neo/ghost/gscan/lib/checks/050-koenig-css-classes.js":"23","/home/neo/ghost/gscan/lib/checks/060-js-api-usage.js":"24","/home/neo/ghost/gscan/lib/faker/index.js":"25","/home/neo/ghost/gscan/lib/format.js":"26","/home/neo/ghost/gscan/lib/index.js":"27","/home/neo/ghost/gscan/lib/read-theme.js":"28","/home/neo/ghost/gscan/lib/read-zip.js":"29","/home/neo/ghost/gscan/lib/specs/canary.js":"30","/home/neo/ghost/gscan/lib/specs/index.js":"31","/home/neo/ghost/gscan/lib/specs/v1.js":"32","/home/neo/ghost/gscan/lib/specs/v2.js":"33","/home/neo/ghost/gscan/lib/utils/index.js":"34","/home/neo/ghost/gscan/shipitfile.js":"35","/home/neo/ghost/gscan/test/001-deprecations.test.js":"36","/home/neo/ghost/gscan/test/005-template-compile.test.js":"37","/home/neo/ghost/gscan/test/010-package-json.test.js":"38","/home/neo/ghost/gscan/test/020-theme-structure.test.js":"39","/home/neo/ghost/gscan/test/030-assets.test.js":"40","/home/neo/ghost/gscan/test/040-ghost-head-foot.test.js":"41","/home/neo/ghost/gscan/test/050-koenig-css-classes.test.js":"42","/home/neo/ghost/gscan/test/060-js-api-usage.test.js":"43","/home/neo/ghost/gscan/test/checker.test.js":"44","/home/neo/ghost/gscan/test/format.test.js":"45","/home/neo/ghost/gscan/test/general.test.js":"46","/home/neo/ghost/gscan/test/read-theme.test.js":"47","/home/neo/ghost/gscan/test/read-zip.test.js":"48","/home/neo/ghost/gscan/test/utils.js":"49","/home/neo/ghost/gscan/lib/checks/070-theme-translations.js":"50","/home/neo/ghost/gscan/test/070-theme-translations.test.js":"51","/home/neo/ghost/gscan/app/middlewares/sentry.js":"52","/home/neo/ghost/gscan/.eslintrc.js":"53","/home/neo/ghost/gscan/app/public/.eslintrc.js":"54","/home/neo/ghost/gscan/test/.eslintrc.js":"55"},{"size":1078,"mtime":1578580125016,"results":"56","hashOfConfig":"57"},{"size":3503,"mtime":1588322102927,"results":"58","hashOfConfig":"57"},{"size":369,"mtime":1587627384944,"results":"59","hashOfConfig":"57"},{"size":795,"mtime":1587627384944,"results":"60","hashOfConfig":"57"},{"size":1363,"mtime":1587899246764,"results":"61","hashOfConfig":"57"},{"size":1357,"mtime":1587627384974,"results":"62","hashOfConfig":"63"},{"size":6899,"mtime":1587627626122,"results":"64","hashOfConfig":"57"},{"size":84,"mtime":1578580125020,"results":"65","hashOfConfig":"57"},{"size":2462,"mtime":1587630495143,"results":"66","hashOfConfig":"57"},{"size":1825,"mtime":1587650787107,"results":"67","hashOfConfig":"57"},{"size":182,"mtime":1587650787107,"results":"68","hashOfConfig":"57"},{"size":1105,"mtime":1587630495143,"results":"69","hashOfConfig":"57"},{"size":925,"mtime":1578580125020,"results":"70","hashOfConfig":"57"},{"size":378,"mtime":1587650787107,"results":"71","hashOfConfig":"57"},{"size":1190,"mtime":1587627385157,"results":"72","hashOfConfig":"57"},{"size":2848,"mtime":1587627384997,"results":"73","hashOfConfig":"57"},{"size":1500,"mtime":1587627384997,"results":"74","hashOfConfig":"57"},{"size":3776,"mtime":1587627384944,"results":"75","hashOfConfig":"57"},{"size":7031,"mtime":1587627626096,"results":"76","hashOfConfig":"57"},{"size":1402,"mtime":1587627384944,"results":"77","hashOfConfig":"57"},{"size":1473,"mtime":1587627384921,"results":"78","hashOfConfig":"57"},{"size":977,"mtime":1587627384997,"results":"79","hashOfConfig":"57"},{"size":1661,"mtime":1587627384997,"results":"80","hashOfConfig":"57"},{"size":1190,"mtime":1587627385174,"results":"81","hashOfConfig":"57"},{"size":2074,"mtime":1578580125020,"results":"82","hashOfConfig":"57"},{"size":5537,"mtime":1587627384997,"results":"83","hashOfConfig":"57"},{"size":1208,"mtime":1587627384911,"results":"84","hashOfConfig":"57"},{"size":7417,"mtime":1587627626136,"results":"85","hashOfConfig":"57"},{"size":1370,"mtime":1587627626089,"results":"86","hashOfConfig":"57"},{"size":4141,"mtime":1587627626062,"results":"87","hashOfConfig":"57"},{"size":345,"mtime":1587627385207,"results":"88","hashOfConfig":"57"},{"size":34210,"mtime":1595349268563,"results":"89","hashOfConfig":"57"},{"size":58777,"mtime":1587627385237,"results":"90","hashOfConfig":"57"},{"size":485,"mtime":1587627385027,"results":"91","hashOfConfig":"57"},{"size":1334,"mtime":1587627385117,"results":"92","hashOfConfig":"57"},{"size":77040,"mtime":1587627385207,"results":"93","hashOfConfig":"94"},{"size":10201,"mtime":1587627625949,"results":"95","hashOfConfig":"94"},{"size":12650,"mtime":1587627626096,"results":"96","hashOfConfig":"94"},{"size":2639,"mtime":1587627385094,"results":"97","hashOfConfig":"94"},{"size":4163,"mtime":1587627385094,"results":"98","hashOfConfig":"94"},{"size":2213,"mtime":1587627385094,"results":"99","hashOfConfig":"94"},{"size":9087,"mtime":1587627385141,"results":"100","hashOfConfig":"94"},{"size":2489,"mtime":1587627385174,"results":"101","hashOfConfig":"94"},{"size":8221,"mtime":1587627626062,"results":"102","hashOfConfig":"94"},{"size":8834,"mtime":1587627625949,"results":"103","hashOfConfig":"94"},{"size":1466,"mtime":1587627385191,"results":"104","hashOfConfig":"94"},{"size":6776,"mtime":1587627626136,"results":"105","hashOfConfig":"94"},{"size":4597,"mtime":1587627385204,"results":"106","hashOfConfig":"94"},{"size":2149,"mtime":1587627384997,"results":"107","hashOfConfig":"94"},{"size":901,"mtime":1587627626062,"results":"108","hashOfConfig":"57"},{"size":2714,"mtime":1587627626062,"results":"109","hashOfConfig":"94"},{"size":610,"mtime":1588319307282,"results":"110","hashOfConfig":"57"},{"size":95,"mtime":1578580125016,"results":"111","hashOfConfig":"57"},{"size":120,"mtime":1578580125016,"results":"112","hashOfConfig":"63"},{"size":95,"mtime":1578580125023,"results":"113","hashOfConfig":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},"1qi8guh",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},"3lohn7",{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x19c9j",{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/neo/ghost/gscan/app/ghost-version.js",["239","240"],"var debug = require('ghost-ignition').debug('ghost-version'),\n    exec = require('child_process').exec,\n    config = require('ghost-ignition').config(),\n    fetchGhostVersion,\n    middleware,\n    ghostVersion,\n    ttl;\n\nfetchGhostVersion = function fetchGhostVersion() {\n    debug('Ghost version not set or ttl expired');\n    exec('npm show ghost version', function (err, stdout, stderr) {\n        if (err) {\n            debug('fetchGhostVersion err', err);\n        }\n\n        if (stderr) {\n            debug('fetchGhostVersion stderr', stderr);\n        }\n\n        if (stdout) {\n            debug('fetchGhostVersion stdout', stdout);\n            ghostVersion = stdout;\n            ttl = new Date(Date.now() + config.get('ghostVersionTTL')).valueOf();\n        }\n    });\n};\n\nmiddleware = function middleware(req, res, next) {\n    if (!ghostVersion || ttl && ttl < Date.now()) {\n        fetchGhostVersion();\n    }\n\n    debug('res.locals.ghostVersion: ' + ghostVersion);\n    res.locals.ghostVersion = ghostVersion;\n    next();\n};\n\nfetchGhostVersion();\n\nmodule.exports = middleware;\n","/home/neo/ghost/gscan/app/index.js",[],"/home/neo/ghost/gscan/app/logging.js",[],"/home/neo/ghost/gscan/app/middlewares/log-request.js",[],"/home/neo/ghost/gscan/app/middlewares/upload-validation.js",[],"/home/neo/ghost/gscan/app/public/js/gscan.js",["241"],"(function ($) {\n    $(document).ready(function ($) {\n        if ($('#theme')[0]) {\n            $('#theme-submit').prop('disabled', !$('#theme')[0].files.length);\n        }\n\n        $(document).on('change', '#theme', function () {\n            $('#theme-submit').prop('disabled', !$(this)[0].files.length);\n        });\n\n        // Mobile Menu Trigger\n        $('.gh-nav-burger').click(function () {\n            $('.gh-mobilehead').toggleClass('gh-mobilehead-open');\n        });\n\n        // Toggle dropdown arrow\n        $('#version').on('click', function () {\n            $('.gh-input-icon.select-arrow').toggleClass('.active');\n        });\n\n        /** Toggle Details **/\n        if ($('.toggle-details').length) {\n            $('.toggle-details').on('click', function () {\n                if ($(this).find('~ .details').is(':hidden')) {\n                    $(this).find('~ .details').show();\n                    $(this).find('.show').hide();\n                    $(this).find('.hide').show();\n                    $(this).parent().addClass('expanded');\n                } else {\n                    $(this).find('~ .details').hide();\n                    $(this).find('.show').show();\n                    $(this).find('.hide').hide();\n                    $(this).parent().removeClass('expanded');\n                }\n            });\n        }\n    });\n}(jQuery));\n","/home/neo/ghost/gscan/bin/cli.js",["242","243"],"#!/usr/bin/env node\n\n// Remove all Node warnings before doing anything else\nprocess.removeAllListeners('warning');\n\nconst prettyCLI = require('@tryghost/pretty-cli');\nconst ui = require('@tryghost/pretty-cli').ui;\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst gscan = require('../lib');\n\nconst options = {\n    format: 'cli'\n};\n\nlet levels;\n\nprettyCLI\n    .configure({\n        name: 'gscan'\n    })\n    .groupOrder([\n        'Sources:',\n        'Utilities:',\n        'Commands:',\n        'Arguments:',\n        'Required Options:',\n        'Options:',\n        'Global Options:'\n    ])\n    .positional('<themePath>', {\n        paramsDesc: 'Theme folder or .zip file path',\n        mustExist: true\n    })\n    .boolean('-z, --zip', {\n        desc: 'Theme path points to a zip file'\n    })\n    .boolean('-1, --v1', {\n        desc: 'Check theme for Ghost 1.0 compatibility'\n    })\n    .boolean('-2, --v2', {\n        desc: 'Check theme for Ghost 2.0 compatibility'\n    })\n    .boolean('-3, --v3', {\n        desc: 'Check theme for Ghost 3.0 compatibility'\n    })\n    .boolean('-c, --canary', {\n        desc: 'Check theme for upcoming Ghost version compatibility'\n    })\n    .boolean('-f, --fatal', {\n        desc: 'Only show fatal errors that prevent upgrading Ghost'\n    })\n    .boolean('--verbose', {\n        desc: 'Output check details'\n    })\n    .parseAndExit()\n    .then((argv) => {\n        if (argv.v1) {\n            options.checkVersion = 'v1';\n        } else if (argv.v2) {\n            options.checkVersion = 'v2';\n        } else if (argv.v3) {\n            options.checkVersion = 'v3';\n        } else if (argv.canary) {\n            options.checkVersion = 'canary';\n        } else {\n            // CASE: set default value\n            options.checkVersion = 'latest';\n        }\n\n        options.verbose = argv.verbose;\n        options.onlyFatalErrors = argv.fatal;\n\n        if (options.onlyFatalErrors) {\n            ui.log(chalk.bold('\\nChecking theme compatibility (fatal issues only)...'));\n        } else {\n            ui.log(chalk.bold('\\nChecking theme compatibility...'));\n        }\n\n        if (argv.zip) {\n            gscan.checkZip(argv.themePath, options)\n                .then(theme => outputResults(theme, options))\n                .catch((error) => {\n                    ui.log(error);\n                });\n        } else {\n            gscan.check(argv.themePath, options)\n                .then(theme => outputResults(theme, options))\n                .catch(function ENOTDIRPredicate(err) {\n                    return err.code === 'ENOTDIR';\n                }, function (err) {\n                    ui.log(err.message);\n                    ui.log('Did you mean to add the -z flag to read a zip file?');\n                });\n        }\n    });\n\nlevels = {\n    error: chalk.red,\n    warning: chalk.yellow,\n    recommendation: chalk.yellow,\n    feature: chalk.green\n};\n\nfunction outputResult(result) {\n    ui.log(levels[result.level](`- ${_.capitalize(result.level)}:`), result.rule);\n\n    if (options.verbose) {\n        ui.log(`${chalk.bold('\\nDetails:')} ${result.details}`);\n    }\n\n    if (result.failures && result.failures.length) {\n        if (options.verbose) {\n            ui.log(''); // extra line-break\n            ui.log(`${chalk.bold('Files:')}`);\n            result.failures.forEach((failure) => {\n                ui.log(`${failure.ref} - ${failure.message}`);\n            });\n        } else {\n            ui.log(`${chalk.bold('Files:')} ${_.map(result.failures, 'ref')}`);\n        }\n    }\n\n    ui.log(''); // extra line-break\n}\n\nfunction getSummary(theme, options) {\n    let summaryText = '';\n    const errorCount = theme.results.error.length;\n    const warnCount = theme.results.warning.length;\n    const pluralize = require('pluralize');\n    const checkSymbol = '\\u2713';\n\n    if (errorCount === 0 && warnCount === 0) {\n        if (options.onlyFatalErrors) {\n            summaryText = `${chalk.green(checkSymbol)} Your theme has no fatal compatibility issues with Ghost ${theme.checkedVersion}`;\n        } else {\n            summaryText = `${chalk.green(checkSymbol)} Your theme is compatible with Ghost ${theme.checkedVersion}`;\n        }\n    } else {\n        summaryText = `Your theme has`;\n\n        if (!_.isEmpty(theme.results.error)) {\n            summaryText += chalk.red.bold(` ${pluralize('error', theme.results.error.length, true)}`);\n        }\n\n        if (!_.isEmpty(theme.results.error) && !_.isEmpty(theme.results.warning)) {\n            summaryText += ' and';\n        }\n\n        if (!_.isEmpty(theme.results.warning)) {\n            summaryText += chalk.yellow.bold(` ${pluralize('warning', theme.results.warning.length, true)}`);\n        }\n\n        summaryText += '!';\n\n        // NOTE: had to subtract the number of 'invisible' formating symbols\n        //       needs update if formatting above changes\n        const hiddenSymbols = 38;\n        summaryText += '\\n' + _.repeat('-', (summaryText.length - hiddenSymbols));\n    }\n\n    return summaryText;\n}\n\nfunction outputResults(theme, options) {\n    try {\n        theme = gscan.format(theme, options);\n    } catch (err) {\n        ui.log.error('Error formating result, some results may be missing.');\n        ui.log.error(err);\n    }\n\n    let errorCount = theme.results.error.length;\n\n    ui.log('\\n' + getSummary(theme, options));\n\n    if (!_.isEmpty(theme.results.error)) {\n        ui.log(chalk.red.bold('\\nErrors'));\n        ui.log(chalk.red.bold('------'));\n        ui.log(chalk.red('Important to fix, functionality may be degraded.\\n'));\n\n        _.each(theme.results.error, rule => outputResult(rule, options));\n    }\n\n    if (!_.isEmpty(theme.results.warning)) {\n        ui.log(chalk.yellow.bold('\\nWarnings'));\n        ui.log(chalk.yellow.bold('--------'));\n\n        _.each(theme.results.warning, rule => outputResult(rule, options));\n    }\n\n    if (!_.isEmpty(theme.results.recommendation)) {\n        ui.log(chalk.yellow.bold('\\nRecommendations'));\n        ui.log(chalk.yellow.bold('---------------'));\n\n        _.each(theme.results.recommendation, rule => outputResult(rule, options));\n    }\n\n    ui.log(`\\nGet more help at ${chalk.cyan.underline('https://ghost.org/docs/api/handlebars-themes/')}`);\n    ui.log(`You can also check theme compatibility at ${chalk.cyan.underline('https://gscan.ghost.org/')}`);\n\n    // The CLI feature is mainly used to run gscan programatically in tests within themes.\n    // Exiting with error code for warnings, causes the test to fail, even tho a theme\n    // upload via Ghost Admin would be possible without showing errors/warning.\n    // See also here: https://github.com/TryGhost/Blog/pull/41#issuecomment-484525754\n    // TODO: make failing for warnings configurable by e. g. passing an option, so we can\n    // disable it for the usage with tests\n    if (errorCount > 0) {\n        process.exit(1);\n    } else {\n        process.exit(0);\n    }\n}\n","/home/neo/ghost/gscan/lib/ast-linter/index.js",[],"/home/neo/ghost/gscan/lib/ast-linter/linter.js",[],"/home/neo/ghost/gscan/lib/ast-linter/rules/base.js",[],"/home/neo/ghost/gscan/lib/ast-linter/rules/index.js",[],"/home/neo/ghost/gscan/lib/ast-linter/rules/lint-no-img-url-in-conditionals.js",[],"/home/neo/ghost/gscan/lib/ast-linter/rules/lint-no-multi-param-conditionals.js",[],"/home/neo/ghost/gscan/lib/ast-linter/test.js",[],"/home/neo/ghost/gscan/lib/checker.js",["244"],"const Promise = require('bluebird');\nconst _ = require('lodash');\nconst requireDir = require('require-dir');\nconst readTheme = require('./read-theme');\nconst versions = require('./utils').versions;\n\nconst checks = requireDir('./checks');\n\n/**\n * Check theme\n *\n * Takes a theme path, reads the theme, and checks it for issues.\n * Returns a theme object.\n * @param themePath\n * @param options\n * @returns {Object}\n */\nconst checker = function checkAll(themePath, options) {\n    options = options || {};\n\n    const passedVersion = _.get(options, 'checkVersion', 'v2');\n    let version = passedVersion;\n\n    // TOOD: get rid of 'latest' concept because its unnecessary invention\n    if (passedVersion === 'latest') {\n        version = 'canary';\n    } else if (passedVersion === 'v3') {\n        version = 'canary';\n    }\n\n    return readTheme(themePath)\n        .then(function (theme) {\n            // set the major version to check\n            theme.checkedVersion = versions[version].major;\n\n            return Promise.reduce(_.values(checks), function (theme, check) {\n                return check(theme, options, themePath);\n            }, theme);\n        });\n};\n\nmodule.exports = checker;\n","/home/neo/ghost/gscan/lib/checks/001-deprecations.js",["245"],"const _ = require('lodash');\nconst spec = require('../specs');\n\nlet checkDeprecations;\n\ncheckDeprecations = function checkDeprecations(theme, options) {\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    let ruleSet = spec.get([checkVersion]);\n\n    // CASE: 001-deprecations checks only needs `rules` that start with `GS001-`\n    const ruleRegex = /GS001-.*/g;\n\n    ruleSet = _.pickBy(ruleSet.rules, function (rule, ruleCode) {\n        if (ruleCode.match(ruleRegex)) {\n            return rule;\n        }\n    });\n\n    _.each(ruleSet, function (check, ruleCode) {\n        _.each(theme.files, function (themeFile) {\n            const template = themeFile.file.match(/^[^/]+.hbs$/) || themeFile.file.match(/^partials[/\\\\]+(.*)\\.hbs$/);\n            const skipTemplateCheck = check.notValidIn && check.notValidIn.match(template);\n            let css = themeFile.file.match(/\\.css/);\n            let cssDeprecations;\n\n            if (template && !check.css && !skipTemplateCheck) {\n                if (themeFile.content.match(check.regex)) {\n                    if (!Object.prototype.hasOwnProperty.call(theme.results.fail, (ruleCode))) {\n                        theme.results.fail[ruleCode] = {failures: []};\n                    }\n\n                    theme.results.fail[ruleCode].failures.push(\n                        {\n                            ref: themeFile.file,\n                            message: 'Please remove or replace ' + check.helper + ' from this template'\n                        }\n                    );\n                }\n            } else if (css && check.css && !skipTemplateCheck) {\n                try {\n                    css = themeFile.content;\n                    cssDeprecations = css.match(check.regex);\n\n                    if (cssDeprecations) {\n                        _.each(cssDeprecations, function (cssDeprecation) {\n                            if (!Object.prototype.hasOwnProperty.call(theme.results.fail, ruleCode)) {\n                                theme.results.fail[ruleCode] = {failures: []};\n                            }\n\n                            theme.results.fail[ruleCode].failures.push(\n                                {\n                                    ref: themeFile.file,\n                                    message: 'Please remove or replace ' + cssDeprecation.trim() + ' from this css file.'\n                                }\n                            );\n                        });\n                    }\n                } catch (err) {\n                // ignore for now\n                }\n            }\n        });\n\n        if (theme.results.pass.indexOf(ruleCode) === -1 && !Object.prototype.hasOwnProperty.call(theme.results.fail, ruleCode)) {\n            theme.results.pass.push(ruleCode);\n        }\n    });\n\n    return theme;\n};\n\nmodule.exports = checkDeprecations;\n","/home/neo/ghost/gscan/lib/checks/002-comment-id.js",["246"],"const _ = require('lodash');\nconst spec = require('../specs');\n\nlet checkCommentID;\n\ncheckCommentID = function checkCommentID(theme, options) {\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    let ruleSet = spec.get([checkVersion]);\n\n    // CASE: 002-comment-id checks only needs `rules` that start with `GS002`\n    const ruleRegex = /GS002-.*/g;\n\n    ruleSet = _.pickBy(ruleSet.rules, function (rule, ruleCode) {\n        if (ruleCode.match(ruleRegex)) {\n            return rule;\n        }\n    });\n    _.each(ruleSet, function (check, ruleCode) {\n        _.each(theme.files, function (themeFile) {\n            var template = themeFile.file.match(/^[^/]+.hbs$/) || themeFile.file.match(/^partials[/\\\\]+(.*)\\.hbs$/);\n\n            if (template) {\n                if (themeFile.content.match(check.regex)) {\n                    if (!Object.prototype.hasOwnProperty.call(theme.results.fail, (ruleCode))) {\n                        theme.results.fail[ruleCode] = {failures: []};\n                    }\n\n                    theme.results.fail[ruleCode].failures.push(\n                        {\n                            ref: themeFile.file\n                        }\n                    );\n                }\n            }\n        });\n\n        if (theme.results.pass.indexOf(ruleCode) === -1 && !Object.prototype.hasOwnProperty.call(theme.results.fail, ruleCode)) {\n            theme.results.pass.push(ruleCode);\n        }\n    });\n\n    return theme;\n};\n\nmodule.exports = checkCommentID;\n","/home/neo/ghost/gscan/lib/checks/005-template-compile.js",["247"],"const _ = require('lodash');\nconst hbs = require('express-hbs');\nconst fakeData = require('../faker');\nconst spec = require('../specs');\n// const debug = require('ghost-ignition').debug('checks:template-compiler');\n\nlet checkTemplatesCompile;\n\ncheckTemplatesCompile = function checkTemplatesCompile(theme, options) {\n    const localHbs = hbs.create();\n    const failures = [];\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    const ruleSet = spec.get([checkVersion]);\n\n    let missingHelper;\n\n    // CASE: 001-deprecations checks only needs `rules` that start with `GS001-DEPR-`\n    const ruleRegex = /GS005-.*/g;\n\n    const rulesToCheck = _.pickBy(ruleSet.rules, function (rule, ruleCode) {\n        if (ruleCode.match(ruleRegex)) {\n            return rule;\n        }\n    });\n\n    _.each(theme.partials, function (partial) {\n        // ensures partials work when running gscan on windows\n        let partialName = partial.split('\\\\').join('/');\n        let partialContent = _.find(theme.files, {file: 'partials/' + partial + '.hbs'});\n        let partialContentWindows = _.find(theme.files, {file: 'partials\\\\' + partial + '.hbs'});\n        partialContent = partialContent ? partialContent.content : partialContentWindows.content;\n\n        localHbs.registerPartial(partialName, partialContent);\n    });\n\n    _.each(rulesToCheck, function (check, ruleCode) {\n        _.each(ruleSet.knownHelpers, function (helper) {\n            // Use standard handlebars {{each}} method for simplicity\n            if (helper === 'foreach') {\n                localHbs.handlebars.registerHelper('foreach', hbs.handlebars.helpers.each);\n            } else {\n                localHbs.handlebars.registerHelper(helper, _.noop);\n            }\n        });\n\n        _.each(theme.files, function (themeFile) {\n            let templateTest = themeFile.file.match(/^[^/]+.hbs$/);\n            let compiled;\n\n            // If this is a main template, test compiling it properly\n            if (templateTest) {\n                try {\n                    // When we read the theme, we precompile, here we compile with registered partials and helpers\n                    // Which will let us detect any missing partials, helpers or parse errors\n                    compiled = localHbs.handlebars.compile(themeFile.content, {\n                        knownHelpers: _.zipObject(ruleSet.knownHelpers, _.map(ruleSet.knownHelpers, function () {\n                            return true;\n                        })),\n                        knownHelpersOnly: true\n                    });\n\n                    // NOTE: fakeData does not resolve finding unknown helpers in context objects!\n                    compiled(fakeData(themeFile));\n                } catch (error) {\n                    // CASE: transform ugly error message from hbs to the known error message: Missing helper: \"X\"\n                    if (error.message.match(/you specified knownhelpersOnly/gi)) {\n                        try {\n                            missingHelper = error.message.match(/but\\sused\\sthe\\sunknown\\shelper\\s(.*)\\s-/)[1];\n                        } catch (err) {\n                            missingHelper = 'unknown helper name';\n                        }\n\n                        error.message = 'Missing helper: \"' + missingHelper + '\"';\n                    }\n\n                    failures.push({\n                        ref: themeFile.file,\n                        message: error.message\n                    });\n                }\n            }\n        });\n\n        if (failures.length > 0) {\n            theme.results.fail[ruleCode] = {failures: failures};\n        } else {\n            theme.results.pass.push(ruleCode);\n        }\n    });\n\n    return theme;\n};\n\nmodule.exports = checkTemplatesCompile;\n","/home/neo/ghost/gscan/lib/checks/010-package-json.js",[],"/home/neo/ghost/gscan/lib/checks/020-theme-structure.js",["248"],"const _ = require('lodash');\nconst spec = require('../specs');\n\nlet checkThemeStructure;\n\n// TODO: template inspection\n//_.each(spec.templates, function (template) {\n//    var match = _.find(theme.files, function (themeFile) {\n//        return themeFile.file.match(template.pattern);\n//    });\n//\n//    if (match) {\n//        out.push({\n//            level: 'feature',\n//            ref: template.name,\n//            message: 'template is provided'\n//        });\n//    }\n//});\n\ncheckThemeStructure = function checkThemeStructure(theme, options) {\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    let ruleSet = spec.get([checkVersion]);\n\n    // CASE: 020-theme-structure checks only needs `rules` that start with `GS020-`\n    const ruleRegex = /GS020-.*/g;\n\n    ruleSet = _.pickBy(ruleSet.rules, function (rule, ruleCode) {\n        if (ruleCode.match(ruleRegex)) {\n            return rule;\n        }\n    });\n\n    _.each(ruleSet, function (check, ruleCode) {\n        if (!_.some(theme.files, {file: check.path})) {\n            // file doesn't exist\n            theme.results.fail[ruleCode] = {\n                failures: [\n                    {\n                        ref: check.path\n                    }\n                ]\n            };\n        } else {\n            theme.results.pass.push(ruleCode);\n        }\n    });\n\n    return theme;\n};\n\nmodule.exports = checkThemeStructure;\n","/home/neo/ghost/gscan/lib/checks/030-assets.js",["249"],"const _ = require('lodash');\nconst path = require('path');\nconst fs = require('fs');\nconst spec = require('../specs');\n\nlet checkAssets = function checkAssets(theme, options, themePath) {\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    const ruleSet = spec.get([checkVersion]);\n\n    let ruleToCheck = 'GS030-ASSET-REQ';\n    let failures = [];\n    let assetMatch;\n    let stats;\n\n    _.filter(theme.files, {ext: '.hbs'}).forEach(function (template) {\n        try {\n            while ((assetMatch = ruleSet.rules[ruleToCheck].regex.exec(template.content)) !== null) {\n                failures.push({ref: template.file, message: assetMatch[2]});\n            }\n        } catch (err) {\n            // ignore\n        }\n    });\n\n    if (failures.length > 0) {\n        theme.results.fail[ruleToCheck] = {failures: failures};\n    } else {\n        theme.results.pass.push(ruleToCheck);\n    }\n\n    ruleToCheck = 'GS030-ASSET-SYM';\n    failures = [];\n\n    theme.files.forEach(function (theme) {\n        try {\n            stats = fs.lstatSync(path.join(themePath, theme.file));\n\n            if (stats.isSymbolicLink()) {\n                failures.push({ref: theme.file});\n            }\n        } catch (err) {\n            // ignore\n        }\n    });\n\n    if (failures.length > 0) {\n        theme.results.fail[ruleToCheck] = {failures: failures};\n    } else {\n        theme.results.pass.push(ruleToCheck);\n    }\n\n    return theme;\n};\n\nmodule.exports = checkAssets;\n","/home/neo/ghost/gscan/lib/checks/040-ghost-head-foot.js",["250"],"const _ = require('lodash');\nconst spec = require('../specs');\n\nlet checkGhostHeadFoot;\n\ncheckGhostHeadFoot = function checkGhostHeadFoot(theme, options) {\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    let ruleSet = spec.get([checkVersion]);\n\n    // CASE: 040-ghost-head-foot checks only needs `rules` that start with `GS040-`\n    const ruleRegex = /GS040-.*/g;\n\n    ruleSet = _.pickBy(ruleSet.rules, function (rule, ruleCode) {\n        if (ruleCode.match(ruleRegex)) {\n            return rule;\n        }\n    });\n\n    _.each(ruleSet, function (check, ruleCode) {\n        if (!theme.helpers || !Object.prototype.hasOwnProperty.call(theme.helpers, check.helper)) {\n            theme.results.fail[ruleCode] = {\n                failures: [{\n                    ref: 'default.hbs'\n                }]\n            };\n        } else {\n            theme.results.pass.push(ruleCode);\n        }\n    });\n\n    return theme;\n};\n\nmodule.exports = checkGhostHeadFoot;\n","/home/neo/ghost/gscan/lib/checks/050-koenig-css-classes.js",["251"],"const _ = require('lodash');\nconst spec = require('../specs');\n\nlet checkKoenigCssClasses;\n\ncheckKoenigCssClasses = function checkKoenigCssClasses(theme, options) {\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    let ruleSet = spec.get([checkVersion]);\n\n    // CASE: 050-koenig-css-classes checks only needs `rules` that start with `GS050-`\n    const ruleRegex = /GS050-.*/g;\n\n    ruleSet = _.pickBy(ruleSet.rules, function (rule, ruleCode) {\n        if (ruleCode.match(ruleRegex)) {\n            return rule;\n        }\n    });\n\n    _.each(ruleSet, function (check, ruleCode) {\n        if (theme.files) {\n            // Check CSS files and HBS files for presence of the classes\n            _.each(theme.files, function (themeFile) {\n                if (!['.css', '.hbs'].includes(themeFile.ext)) {\n                    return;\n                }\n\n                try {\n                    let cssPresent = themeFile.content.match(check.regex);\n\n                    if (cssPresent && theme.results.pass.indexOf(ruleCode) === -1) {\n                        theme.results.pass.push(ruleCode);\n                    }\n                } catch (err) {\n                    // ignore for now\n                }\n            });\n        }\n\n        if (!theme.files || (theme.results.pass.indexOf(ruleCode) === -1 && !Object.prototype.hasOwnProperty.call(theme.results.fail, ruleCode))) {\n            theme.results.fail[ruleCode] = {};\n            theme.results.fail[ruleCode].failures = [\n                {\n                    ref: 'styles'\n                }\n            ];\n        }\n    });\n\n    return theme;\n};\n\nmodule.exports = checkKoenigCssClasses;\n","/home/neo/ghost/gscan/lib/checks/060-js-api-usage.js",[],"/home/neo/ghost/gscan/lib/faker/index.js",[],"/home/neo/ghost/gscan/lib/format.js",["252","253"],"const _ = require('lodash');\nconst spec = require('./specs');\nconst levelWeights = {\n    error: 10,\n    warning: 3,\n    recommendation: 1\n};\n\nlet format;\nlet calcScore;\n\ncalcScore = function calcScore(results, stats) {\n    var maxScore, actualScore, balancedScore;\n\n    maxScore = _.reduce(levelWeights, function (max, weight, level) {\n        return max + (weight * stats[level]);\n    }, 0);\n\n    actualScore = _.reduce(levelWeights, function (max, weight, level) {\n        return max - (weight * _.size(results[level]));\n    }, maxScore);\n\n    balancedScore = _.ceil((100 / maxScore) * actualScore);\n\n    return {\n        value: balancedScore,\n        level: _.size(results.error) > 0 ? 'error' : balancedScore < 60 ? 'warning' : 'passing'\n    };\n};\n\nconst formatCLI = (theme) => {\n    _.each(theme.results, (results) => {\n        if (results.length) {\n            results.forEach((result) => {\n                ['rule', 'details'].forEach((key) => {\n                    // blue highlight instead of <code></code> block\n                    result[key] = result[key].replace(/<code>/g, '\\x1B[36m');\n                    result[key] = result[key].replace(/<\\/code>/g, '\\x1B[39m');\n\n                    // new line instead of <br>\n                    result[key] = result[key].replace(/<br>/g, '\\n');\n\n                    // transforms '<a href=link>text</a>' -> 'text (link)'\n                    result[key] = result[key].replace(/<a.*href=\"(.*?)\".*>(.*?)<\\/a>/gi, '$2 ($1)');\n                });\n            });\n        }\n    });\n};\n\n/**\n * TODO: This needs cleaning up, a lot\n */\nformat = function format(theme, options = {}) {\n    options = _.extend({onlyFatalErrors: false, sortByFiles: false}, options);\n    const checkVersion = _.get(options, 'checkVersion', 'latest');\n    const ruleSet = spec.get([checkVersion]);\n\n    var processedCodes = [],\n        hasFatalErrors = false,\n        stats = {\n            error: 0,\n            warning: 0,\n            recommendation: 0\n        };\n\n    theme.results.error = [];\n    theme.results.warning = [];\n    theme.results.recommendation = [];\n    theme.results.missing = [];\n\n    _.each(theme.results.fail, function (info, code) {\n        const rule = ruleSet.rules[code];\n\n        if (rule.fatal && options.onlyFatalErrors || options.onlyFatalErrors === false) {\n            if (rule.fatal) {\n                hasFatalErrors = true;\n            }\n\n            theme.results[rule.level].push(_.extend({}, _.merge({}, {fatal: false}, rule), info, {code: code}));\n            stats[rule.level] += 1;\n            processedCodes.push(code);\n        }\n    });\n\n    delete theme.results.fail;\n\n    _.each(theme.results.pass, function (code, index) {\n        const rule = ruleSet.rules[code];\n        theme.results.pass[index] = _.extend({}, rule, {code: code});\n        stats[rule.level] += 1;\n        processedCodes.push(code);\n    });\n\n    _.each(_.difference(_.keys(ruleSet.rules), processedCodes), function (code) {\n        theme.results.missing.push(ruleSet.rules[code]);\n    });\n\n    theme.results.score = calcScore(theme.results, stats);\n    theme.results.hasFatalErrors = hasFatalErrors;\n\n    // CASE 1: sort by files (@TODO: sort by passed rules is not possible, because we don't push the file reference)\n    // CASE 2: (default): sort by rules\n    if (options.sortByFiles) {\n        const recommendationsByFile = {};\n        const errorsByFile = {};\n        const warningsByFile = {};\n\n        theme.results.error.forEach((error) => {\n            const failures = error.failures;\n\n            if (!failures || !failures.length) {\n                return;\n            }\n\n            failures.forEach((failure) => {\n                if (!Object.prototype.hasOwnProperty.call(errorsByFile, failure.ref)) {\n                    errorsByFile[failure.ref] = [];\n                }\n\n                errorsByFile[failure.ref].push(error);\n            });\n        });\n\n        theme.results.warning.forEach((warning) => {\n            const failures = warning.failures;\n\n            if (!failures || !failures.length) {\n                return;\n            }\n\n            failures.forEach((failure) => {\n                if (!Object.prototype.hasOwnProperty.call(warningsByFile, failure.ref)) {\n                    warningsByFile[failure.ref] = [];\n                }\n\n                warningsByFile[failure.ref].push(warning);\n            });\n        });\n\n        theme.results.recommendation.forEach((passed) => {\n            const failures = passed.failures;\n\n            if (!failures || !failures.length) {\n                return;\n            }\n\n            failures.forEach((failure) => {\n                if (!Object.prototype.hasOwnProperty.call(recommendationsByFile, failure.ref)) {\n                    recommendationsByFile[failure.ref] = [];\n                }\n\n                recommendationsByFile[failure.ref].push(passed);\n            });\n        });\n\n        theme.results.recommendation = {\n            all: theme.results.recommendation,\n            byFiles: recommendationsByFile\n        };\n\n        theme.results.error = {\n            all: theme.results.error,\n            byFiles: errorsByFile\n        };\n\n        theme.results.warning = {\n            all: theme.results.warning,\n            byFiles: warningsByFile\n        };\n    } else {\n        theme.results.error = _.orderBy(theme.results.error, 'fatal', 'desc');\n    }\n\n    if (options.format) {\n        if (options.format === 'cli') {\n            formatCLI(theme);\n        }\n    }\n\n    return theme;\n};\n\nmodule.exports = format;\n","/home/neo/ghost/gscan/lib/index.js",["254"],"const _ = require('lodash'),\n    fs = require('fs-extra'),\n    check = require('./checker'),\n    format = require('./format'),\n    readZip = require('./read-zip'),\n    {errors} = require('ghost-ignition');\n\nconst checkZip = function checkZip(path, options) {\n    options = Object.assign({}, {\n        keepExtractedDir: false\n    }, options);\n\n    let zip;\n\n    if (_.isString(path)) {\n        zip = {\n            path,\n            name: path.match(/(.*\\/)?(.*).zip$/)[2]\n        };\n    } else {\n        zip = _.clone(path);\n    }\n\n    return readZip(zip)\n        .then(({path}) => check(path, options))\n        .then((theme) => {\n            if (options.keepExtractedDir) {\n                return theme;\n            } else {\n                return fs.remove(zip.origPath).then(() => theme);\n            }\n        })\n        .catch(function ({message}) {\n            throw new errors.ValidationError({\n                message: 'Failed to read zip file',\n                help: 'Your zip file might be corrupted, try unzipping and zipping again.',\n                errorDetails: message,\n                context: zip.name\n            });\n        });\n};\n\nmodule.exports = {\n    check,\n    checkZip,\n    format\n};\n","/home/neo/ghost/gscan/lib/read-theme.js",["255","256","257"],"const fs = require('fs-extra');\nconst Promise = require('bluebird');\nconst _ = require('lodash');\nconst os = require('os');\nconst hbs = require('express-hbs');\nconst path = require('path');\n\nlet ignore = ['node_modules', 'bower_components', '.DS_Store', '.git', '.svn', 'Thumbs.db', '.yarn-cache'],\n    readHbs = hbs.create(),\n    readThemeStructure,\n    extractTemplates,\n    extractCustomTemplates,\n    readFiles,\n    processHelpers;\n\nreadThemeStructure = function readThemeFiles(themePath, subPath, arr) {\n    themePath = path.join(themePath, '.');\n    subPath = subPath || '';\n\n    var tmpPath = os.tmpdir(),\n        inTmp = themePath.substr(0, tmpPath.length) === tmpPath;\n\n    arr = arr || [];\n\n    var makeResult = function makeResult(result, subFilePath, ext) {\n        result.push({\n            file: subFilePath,\n            ext: ext\n        });\n        return result;\n    };\n\n    return fs.readdir(themePath).then(function (files) {\n        return Promise.reduce(files, function (result, file) {\n            var extMatch = file.match(/.*?(\\.[0-9a-z]+$)/i),\n                subFilePath = path.join(subPath, file),\n                newPath = path.join(themePath, file);\n\n            /**\n             * don't process ignored paths, remove target file\n             *\n             * @TODO:\n             * - gscan extracts the target zip into a tmp directory\n             * - if you use gscan with `keepExtractedDir` the caller (Ghost) will use the tmp folder with the deleted ignore files\n             * - what we don't support right now is to delete the ignore files from the zip\n             */\n            if (ignore.indexOf(file) > -1) {\n                return inTmp\n                    ? fs.remove(newPath)\n                        .then(function () {\n                            return result;\n                        })\n                    : result;\n            }\n\n            // NOTE: lstat does not follow symlinks\n            return fs.lstat(newPath).then(function (statFile) {\n                if (statFile.isDirectory()) {\n                    return readThemeStructure(newPath, subFilePath, result);\n                } else {\n                    return makeResult(result, subFilePath, extMatch !== null ? extMatch[1] : undefined);\n                }\n            });\n        }, arr);\n    });\n};\n\nreadFiles = function readFiles(theme) {\n    const themeFilesContent = _.filter(theme.files, function (themeFile) {\n        if (themeFile && themeFile.ext) {\n            return themeFile.ext.match(/\\.hbs|\\.css|\\.js/ig) || themeFile.file.match(/package.json/i);\n        }\n    });\n\n    // Setup a partials array\n    theme.partials = [];\n\n    // CASE: we need the actual content of all css, hbs files, and package.json for\n    // our checks\n    return Promise.map(themeFilesContent, function (themeFile) {\n        return fs.readFile(path.join(theme.path, themeFile.file), 'utf8').then(function (content) {\n            const partialMatch = themeFile.file.match(/^partials[/\\\\]+(.*)\\.hbs$/);\n            themeFile.content = content;\n\n            if (themeFile.ext.match(/.hbs/gi)) {\n                try {\n                    themeFile.compiled = readHbs.handlebars.precompile(content);\n                } catch (error) {\n                // This error is caught and handled in the template-compile check\n                }\n            }\n            // If this is a partial, put the partial name in the partials array\n            if (partialMatch) {\n                theme.partials.push(partialMatch[1]);\n            }\n\n            processHelpers(theme, themeFile);\n        });\n    }).then(function () {\n        return theme;\n    });\n};\n\nprocessHelpers = function (theme, themeFile) {\n    var helperRegex = /lookupProperty\\(helpers,\"([a-z0-9_-]+)\"/gmi,\n        helperName,\n        match;\n\n    theme.helpers = theme.helpers || {};\n\n    while ((match = helperRegex.exec(themeFile.compiled)) !== null) {\n        helperName = match[1];\n\n        if (theme.helpers[helperName]) {\n            theme.helpers[helperName].push(themeFile.file);\n        } else {\n            theme.helpers[helperName] = [themeFile.file];\n        }\n    }\n};\n\n/**\n * Works only for posts, pages and custom templates at the moment.\n *\n * @TODO:\n * This fn was added for the custom post template feature https://github.com/TryGhost/Ghost/issues/9060.\n * We've decided to extract custom templates in GScan for now, because the read-theme helper already knows which\n * hbs files are part of a theme.\n *\n * As soon as we have another use case e.g. we would like to allow to parse a custom template header with frontmatter,\n * then we need to know which template is custom, which is not. Also, it could be that\n * this function is outsourced in the future, so it can be used by GScan and Ghost. But for now, we don't pre-optimise.\n */\nextractCustomTemplates = function extractCustomTemplates(allTemplates) {\n    var toReturn = [],\n        generateName = function generateName(templateName) {\n            var name = templateName;\n\n            name = name.replace(/^(post-|page-|custom-)/, '');\n            name = name.replace(/-/g, ' ');\n            name = name.replace(/\\b\\w/g, function (letter) {\n                return letter.toUpperCase();\n            });\n\n            return name.trim();\n        },\n        generateFor = function (templateName) {\n            if (templateName.match(/^page-/)) {\n                return ['page'];\n            }\n\n            if (templateName.match(/^post-/)) {\n                return ['post'];\n            }\n\n            return ['page', 'post'];\n        },\n        generateSlug = function (templateName) {\n            if (templateName.match(/^custom-/)) {\n                return null;\n            }\n\n            return templateName.match(/^(page-|post-)(.*)/)[2];\n        };\n\n    _.each(allTemplates, function (templateName) {\n        if (templateName.match(/^(post-|page-|custom-)/) && !templateName.match(/\\//)) {\n            toReturn.push({\n                filename: templateName,\n                name: generateName(templateName),\n                for: generateFor(templateName),\n                slug: generateSlug(templateName)\n            });\n        }\n    });\n\n    return toReturn;\n};\n\n/**\n * Extracts from all theme files the .hbs files.\n */\nextractTemplates = function extractTemplates(allFiles) {\n    return _.reduce(allFiles, function (templates, entry) {\n        // CASE: partials are added to `theme.partials`\n        if (entry.file.match(/^partials[/\\\\]+(.*)\\.hbs$/)) {\n            return templates;\n        }\n\n        // CASE: we ignore any hbs files in assets/\n        if (entry.file.match(/^assets[/\\\\]+(.*)\\.hbs$/)) {\n            return templates;\n        }\n\n        var tplMatch = entry.file.match(/(.*)\\.hbs$/);\n        if (tplMatch) {\n            templates.push(tplMatch[1]);\n        }\n        return templates;\n    }, []);\n};\n\nmodule.exports = function readTheme(themePath) {\n    return readThemeStructure(themePath)\n        .then(function (themeFiles) {\n            var allTemplates = extractTemplates(themeFiles);\n\n            return readFiles({\n                path: themePath,\n                files: themeFiles,\n                templates: {\n                    all: allTemplates,\n                    custom: extractCustomTemplates(allTemplates)\n                },\n                results: {\n                    pass: [],\n                    fail: {}\n                }\n            });\n        });\n};\n","/home/neo/ghost/gscan/lib/read-zip.js",[],"/home/neo/ghost/gscan/lib/specs/canary.js",[],"/home/neo/ghost/gscan/lib/specs/index.js",[],"/home/neo/ghost/gscan/lib/specs/v1.js",[],"/home/neo/ghost/gscan/lib/specs/v2.js",[],"/home/neo/ghost/gscan/lib/utils/index.js",[],"/home/neo/ghost/gscan/shipitfile.js",[],"/home/neo/ghost/gscan/test/001-deprecations.test.js",[],"/home/neo/ghost/gscan/test/005-template-compile.test.js",[],"/home/neo/ghost/gscan/test/010-package-json.test.js",[],"/home/neo/ghost/gscan/test/020-theme-structure.test.js",[],"/home/neo/ghost/gscan/test/030-assets.test.js",[],"/home/neo/ghost/gscan/test/040-ghost-head-foot.test.js",[],"/home/neo/ghost/gscan/test/050-koenig-css-classes.test.js",[],"/home/neo/ghost/gscan/test/060-js-api-usage.test.js",[],"/home/neo/ghost/gscan/test/checker.test.js",[],"/home/neo/ghost/gscan/test/format.test.js",[],"/home/neo/ghost/gscan/test/general.test.js",[],"/home/neo/ghost/gscan/test/read-theme.test.js",[],"/home/neo/ghost/gscan/test/read-zip.test.js",[],"/home/neo/ghost/gscan/test/utils.js",["258"],"var path = require('path'),\n    should = require('should'),\n    readTheme = require('../lib/read-theme'),\n    testThemePath = 'test/fixtures/themes',\n    getThemePath,\n    testCheck;\n\nshould.Assertion.add('ValidResultObject', function () {\n    this.params = {operator: 'to be valid result object'};\n\n    should.exist(this.obj);\n\n    this.obj.should.be.an.Object().with.properties(['pass', 'fail']);\n    this.obj.pass.should.be.an.Array();\n    this.obj.fail.should.be.an.Object();\n});\n\nshould.Assertion.add('ValidThemeObject', function () {\n    this.params = {operator: 'to be valid theme object'};\n\n    should.exist(this.obj);\n    this.obj.should.be.an.Object().with.properties(['path', 'files', 'results']);\n    this.obj.path.should.be.a.String();\n    this.obj.files.should.be.an.Array();\n    this.obj.results.should.be.a.ValidResultObject();\n});\n\nshould.Assertion.add('ValidFailObject', function () {\n    //this.obj.should.be.an.Object().with.properties(['level', 'message', 'ref']);\n    //this.obj.should.have.property('level').which.is.a.String().and.be.oneOf(levels);\n    //this.obj.should.have.property('message').which.is.a.String();\n    //this.obj.should.have.property('ref').which.is.a.String();\n\n    Object.keys(this.obj).forEach(function (key) {\n        key.should.be.oneOf('message', 'failures');\n    });\n\n    if (Object.prototype.hasOwnProperty.call(this.obj, 'message')) {\n        this.obj.message.should.be.a.String();\n    }\n\n    if (Object.prototype.hasOwnProperty.call(this.obj, 'failures')) {\n        this.obj.failures.should.be.an.Array();\n    }\n});\n\nshould.Assertion.add('ValidRule', function () {\n    var levels = ['error', 'warning', 'recommendation', 'feature']; // eslint-disable-line no-unused-vars\n});\n\ngetThemePath = function (themeId) {\n    return path.resolve(path.join(testThemePath, themeId));\n};\n\ntestCheck = function testCheck(checkLib, themeId, options) {\n    var themePath = getThemePath(themeId);\n\n    return readTheme(themePath).then(function runCheck(theme) {\n        return checkLib.call(this, theme, options, themePath);\n    });\n};\n\nmodule.exports = {\n    testCheck: testCheck,\n    themePath: getThemePath\n};\n","/home/neo/ghost/gscan/lib/checks/070-theme-translations.js",[],"/home/neo/ghost/gscan/test/070-theme-translations.test.js",[],"/home/neo/ghost/gscan/app/middlewares/sentry.js",[],"/home/neo/ghost/gscan/.eslintrc.js",[],"/home/neo/ghost/gscan/app/public/.eslintrc.js",[],"/home/neo/ghost/gscan/test/.eslintrc.js",[],{"ruleId":"259","severity":1,"message":"260","line":9,"column":30,"nodeType":"261","messageId":"262","endLine":9,"endColumn":47},{"ruleId":"259","severity":1,"message":"263","line":28,"column":23,"nodeType":"261","messageId":"262","endLine":28,"endColumn":33},{"ruleId":"259","severity":1,"message":"264","line":2,"column":33,"nodeType":"261","messageId":"262","endLine":2,"endColumn":34},{"ruleId":"259","severity":1,"message":"265","line":127,"column":28,"nodeType":"261","messageId":"262","endLine":127,"endColumn":35},{"ruleId":"259","severity":1,"message":"265","line":166,"column":31,"nodeType":"261","messageId":"262","endLine":166,"endColumn":38},{"ruleId":"259","severity":1,"message":"266","line":36,"column":63,"nodeType":"261","messageId":"262","endLine":36,"endColumn":68},{"ruleId":"259","severity":1,"message":"267","line":6,"column":30,"nodeType":"261","messageId":"262","endLine":6,"endColumn":47},{"ruleId":"259","severity":1,"message":"268","line":6,"column":27,"nodeType":"261","messageId":"262","endLine":6,"endColumn":41},{"ruleId":"259","severity":1,"message":"269","line":9,"column":34,"nodeType":"261","messageId":"262","endLine":9,"endColumn":55},{"ruleId":"259","severity":1,"message":"270","line":21,"column":32,"nodeType":"261","messageId":"262","endLine":21,"endColumn":51},{"ruleId":"259","severity":1,"message":"266","line":34,"column":35,"nodeType":"261","messageId":"262","endLine":34,"endColumn":40},{"ruleId":"259","severity":1,"message":"271","line":6,"column":31,"nodeType":"261","messageId":"262","endLine":6,"endColumn":49},{"ruleId":"259","severity":1,"message":"272","line":6,"column":34,"nodeType":"261","messageId":"262","endLine":6,"endColumn":55},{"ruleId":"259","severity":1,"message":"273","line":12,"column":22,"nodeType":"261","messageId":"262","endLine":12,"endColumn":31},{"ruleId":"259","severity":1,"message":"274","line":54,"column":19,"nodeType":"261","messageId":"262","endLine":54,"endColumn":25},{"ruleId":"259","severity":1,"message":"275","line":25,"column":17,"nodeType":"261","messageId":"262","endLine":25,"endColumn":21},{"ruleId":"259","severity":1,"message":"276","line":68,"column":22,"nodeType":"261","messageId":"262","endLine":68,"endColumn":31},{"ruleId":"259","severity":1,"message":"277","line":134,"column":35,"nodeType":"261","messageId":"262","endLine":134,"endColumn":57},{"ruleId":"259","severity":1,"message":"278","line":183,"column":29,"nodeType":"261","messageId":"262","endLine":183,"endColumn":45},{"ruleId":"259","severity":1,"message":"279","line":55,"column":22,"nodeType":"261","messageId":"262","endLine":55,"endColumn":31},"no-shadow","'fetchGhostVersion' is already declared in the upper scope.","Identifier","noShadow","'middleware' is already declared in the upper scope.","'$' is already declared in the upper scope.","'options' is already declared in the upper scope.","'theme' is already declared in the upper scope.","'checkDeprecations' is already declared in the upper scope.","'checkCommentID' is already declared in the upper scope.","'checkTemplatesCompile' is already declared in the upper scope.","'checkThemeStructure' is already declared in the upper scope.","'checkGhostHeadFoot' is already declared in the upper scope.","'checkKoenigCssClasses' is already declared in the upper scope.","'calcScore' is already declared in the upper scope.","'format' is already declared in the upper scope.","'path' is already declared in the upper scope.","'readFiles' is already declared in the upper scope.","'extractCustomTemplates' is already declared in the upper scope.","'extractTemplates' is already declared in the upper scope.","'testCheck' is already declared in the upper scope."]